API
Current Conditions:

Obtain the Conditions for Minneapolis, MN.

import AerisWeather from '@aerisweather/javascript-sdk';
window.addEventListener('load', () => {
    const aeris = new AerisWeather('KIP_ID', 'KIP_SECRET');
    const request = aeris.api();
    request.endpoint('observations');
    request.place('minneapolis,mn');
    request.get().then((result) => {
        const data = result.data.ob;
        console.log(data);
    });
});

Obtain the latest Conditions for Minneapolis, but only return the temperature in Fahrenheit.

import AerisWeather from '@aerisweather/javascript-sdk';
window.addEventListener('load', () => {
    const aeris = new AerisWeather('KIP_ID', 'KIP_SECRET');
    const request = aeris.api();
    request.endpoint('observations');
    request.place('minneapolis,mn');
    request.fields('ob.tempF');
    request.get().then((result) => {
        const data = result.data;
        console.log(data);
    });
});


Forecasts
Obtain the 15-day forecast for Minneapolis, MN

import AerisWeather from '@aerisweather/javascript-sdk';
window.addEventListener('load', () => {
    const aeris = new AerisWeather('KIP_ID', 'KIP_SECRET');
    const request = aeris.api();
    request.endpoint('forecasts');
    request.place('minneapolis,mn');
    request.limit(15);
    request.get().then((result) => {
        const data = result.data;
        console.log(data);
    });
});

Obtain the 15-day forecast for Minneapolis, MN via latitude / longitude, with a midnight-to-midnight output format.

import AerisWeather from '@aerisweather/javascript-sdk';
window.addEventListener('load', () => {

    const aeris = new AerisWeather('KIP_ID', 'KIP_SECRET');
    const request = aeris.api();
    request.endpoint('forecasts');
    request.place('44.977753, -93.265015');
    request.limit(15);
    request.filter('daynight');
    request.get().then((result) => {
        const data = result.data[0];
        console.log(data);
    });

});


Obtain the 15-day forecast for Minneapolis, MN, limiting the results to the date, weather and max temperature in Fahrenheit.
import AerisWeather from '@aerisweather/javascript-sdk';
window.addEventListener('load', () => {

    let forecastwrapper = document.querySelector('[fore]');

    const aeris = new AerisWeather('KIP_ID', 'KIP_SECRET');
    const request = aeris.api();
    request.endpoint('forecasts');
    request.place('minneapolis,mn');
    request.limit(15);
    request.fields('periods.dateTimeISO, periods.weather, periods.maxTempF');
    request.get().then((result) => {
        const data = result.data[0].periods;
        console.log(data);
        data.forEach(i => {
            let thedate = i.dateTimeISO.slice(0, 10);
            const formatHTML = (
                `<section class="forecast__section">
                    <span class="forecast__ind forecast__ind--date">${thedate}</span>
                    <span class="forecast__ind forecast__ind--weather">${i.weather}</span>
                    <span class="forecast__ind forecast__ind--maxtemp">${i.maxTempF}&deg;</span>
                </section>`
            )
            forecastwrapper.insertAdjacentHTML('beforeend', formatHTML);
        });
    });

});

Obtain the forecast for this weekend (Saturday / Sunday) for New York, NY.

import AerisWeather from '@aerisweather/javascript-sdk';
window.addEventListener('load', () => {

    const aeris = new AerisWeather('KIP_ID', 'KIP_SECRET');
    const request = aeris.api();
    request.endpoint('forecasts');
    request.place('new+york,ny');
    request.from('saturday');
    request.to('sunday');
    request.get().then((result) => {
        const data = result.data[0].periods;
        console.log(data);
    });

});


Obtain the historical conditions in hourly format for Minneapolis, MN on March 3, 2020.

import AerisWeather from '@aerisweather/javascript-sdk';
window.addEventListener('load', () => {
    const aeris = new AerisWeather('KIP_ID', 'KIP_SECRET');
    const request = aeris.api();
    request.endpoint('conditions');
    request.place('minneapolis,mn');
    request.filter('daynight');
    request.from('03/03/2020');
    request.to('+24hour');
    request.get().then((result) => {
        const data = result.data[0];
        console.log(data);
    });

});

Obtain the historical in daily summary format for Minneapolis, MN on March 3, 2020.

import AerisWeather from '@aerisweather/javascript-sdk';
window.addEventListener('load', () => {
    const aeris = new AerisWeather('KIP_ID', 'KIP_SECRET');
    const request = aeris.api();
    request.endpoint('conditions/summary');
    request.place('minneapolis,mn');
    request.filter('day');
    request.from('03/03/2020');
    request.to('03/03/2020');
    request.get().then((result) => {
        const data = result.data[0];
        console.log(data);
    });

});


Alerts

Obtain any active advisories for Minneapolis, MN (NOTE: possible there are none.)

import AerisWeather from '@aerisweather/javascript-sdk';
window.addEventListener('load', () => {
    const aeris = new AerisWeather('KIP_ID', 'KIP_SECRET');
    const request = aeris.api();
    request.endpoint('alerts');
    request.place('minneapolis,mn');
    request.filter('advisory');
    request.get().then((result) => {
        const data = result.data[0];
        console.log(data);
    });

});

Obtain active advisories for a location verified as having an active advisory here:

import AerisWeather from '@aerisweather/javascript-sdk';
window.addEventListener('load', () => {
    const aeris = new AerisWeather('KIP_ID', 'KIP_SECRET');
    const request = aeris.api();
    request.endpoint('alerts');
    request.place('missoula,mt');
    request.filter('advisory');
    request.get().then((result) => {
        const data = result.data[0];
        console.log(data);
    });

});

Maps (In addition to the URL or code, provide the estimated number of map units each map would require)

Static Map
Map that is 600px x 600px, centered on Minneapolis, MN, zoom level 5, with flat base map, global radar, and admin overlay.

import MapRequest from '@aerisweather/javascript-sdk/dist/network/maps/MapRequest';

window.addEventListener('load', () => {
    let staticmap = document.querySelector('[staticmap]');

    let maplayers = 'flat,radar,admin';
    let mapcenter = 'minneapolis,mn';
    let mapw = 600;
    let maph = 600;
    let mapz = 5;
    let maptile = 256;
    let mapcols = Math.ceil(mapw / maptile);
    let maprows = Math.ceil(maph / maptile);

    let mapunits = mapcols * maprows;

    console.log(mapunits);

    const request = new MapRequest({
        client: {
            id: 'KIP_ID',
            secret: 'KIP_SECRET'
        }
    });

    request.layers(maplayers);
    request.center(mapcenter);
    request.zoom(mapz);
    request.size(mapw, maph);
    request.get().then((result) => {
        console.log(result.image);
        staticmap.insertAdjacentElement('afterbegin', result.image);
        const estunits = (
            `<h4 class="staticmap__estunits">Estimated Map Units: <span>${mapunits}</span></h4>`
        );
        staticmap.insertAdjacentHTML('beforeend', estunits);
    });

});

Interactive Map
Map using the JS SDK build a Leaflet map, centered over Kansas City, MO, at zoom level 4, animation -2 hours to now, with optional overlays of alerts, and temperatures, and radar as the default layer.

import AerisWeather from '@aerisweather/javascript-sdk';
window.addEventListener('load', () => {
    let interactivemap = document.querySelector('[interactivemap]');

    let maplayers = 'alerts,temperatures,radar';
    let mapcenter = {
        lat: 39.099728,
        lon: -94.578568
    }
    let mapw = 600;
    let maph = 600;
    let mapz = 4;
    let maptile = 256;
    let mapcols = Math.ceil(mapw / maptile);
    let maprows = Math.ceil(maph / maptile);

    let mapunits = mapcols * maprows;

    const aeris = new AerisWeather('KIP_ID', 'KIP_SECRET');

    aeris.views().then((views) => {
        const map = new views.Map(interactivemap, {
            map: {
                strategy: 'leaflet',
                layers: {
                    data: maplayers
                },
                center: mapcenter,
                zoom: mapz,
                size: {
                    width: mapw,
                    height: maph
                },
                timeline: {
                    from: -2 * 3600,
                    to: 0
                }
            }
        });
    });

    const estunits = (
        `<h4 class="staticmap__estunits">Estimated Map Units: <span>${mapunits}</span></h4>`
    );

    document.querySelector('.interactivemap__wrapper').insertAdjacentHTML('beforeend', estunits);

});
























